import sqlite3
import requests
from datetime import datetime

# Função para obter dados da previsão meteorológica (usando OpenWeatherMap)
def obter_previsao_meteorologica(regiao):
    chave_api = "sua_chave_api_openweathermap"
    url = f"http://api.openweathermap.org/data/2.5/forecast?q={regiao}&units=metric&lang=pt&appid={chave_api}"
    response = requests.get(url)
    dados = response.json()
    previsao = []
    for item in dados['list']:
        data_inicio = item['dt_txt']
        data_fim = item['dt_txt']
        tipo_condicao = item['weather'][0]['description']
        temperatura = item['main']['temp']
        umidade = item['main']['humidity']
        previsao.append((data_inicio, data_fim, tipo_condicao, regiao, temperatura, umidade))
    return previsao

# Função para obter os preços dos produtos agrícolas (usando a API AgriPrice)
def obter_preco_produto():
    url = "https://api.agriprice.com.br/v1/preco"
    response = requests.get(url)
    dados = response.json()
    preco_produto = []
    for item in dados:
        produto = item['produto']
        preco_atual = item['preco_atual']
        data_atualizacao = item['data_atualizacao']
        regiao = item['regiao']
        preco_produto.append((produto, preco_atual, data_atualizacao, regiao))
    return preco_produto

# Função para obter a melhor época de plantio (usando a API Agricultura Brasil)
def obter_melhor_epoca_plantio():
    url = "https://api.agriculturabrasil.com.br/melhor-epoca-plantio"
    response = requests.get(url)
    dados = response.json()
    epoca_plantio = []
    for item in dados:
        produto = item['produto']
        melhor_epoca_plantio = item['melhor_epoca_plantio']
        regiao = item['regiao']
        epoca_plantio.append((produto, melhor_epoca_plantio, regiao))
    return epoca_plantio

# Função para conectar ao banco de dados SQLite
def conectar_db():
    conn = sqlite3.connect('dados_agricultura.db')
    return conn

# Função para criar as tabelas no banco de dados
def criar_tabelas():
    conn = conectar_db()
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS PrevisaoMeteorologica (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            data_inicio TEXT,
            data_fim TEXT,
            tipo_condicao TEXT,
            regiao TEXT,
            temperatura REAL,
            umidade REAL
        );
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS PrecoProduto (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            produto TEXT,
            preco_atual REAL,
            data_atualizacao TEXT,
            regiao TEXT
        );
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS AgriculturaBrasil (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            produto TEXT,
            melhor_epoca_plantio TEXT,
            regiao TEXT
        );
    ''')
    conn.commit()
    conn.close()

# Função para salvar as previsões meteorológicas no banco de dados
def salvar_previsao_meteorologica(dados):
    conn = conectar_db()
    cursor = conn.cursor()
    cursor.executemany('''
        INSERT INTO PrevisaoMeteorologica (data_inicio, data_fim, tipo_condicao, regiao, temperatura, umidade)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', dados)
    conn.commit()
    conn.close()

# Função para salvar os preços dos produtos no banco de dados
def salvar_preco_produto(dados):
    conn = conectar_db()
    cursor = conn.cursor()
    cursor.executemany('''
        INSERT INTO PrecoProduto (produto, preco_atual, data_atualizacao, regiao)
        VALUES (?, ?, ?, ?)
    ''', dados)
    conn.commit()
    conn.close()

# Função para salvar a melhor época de plantio no banco de dados
def salvar_melhor_epoca_plantio(dados):
    conn = conectar_db()
    cursor = conn.cursor()
    cursor.executemany('''
        INSERT INTO AgriculturaBrasil (produto, melhor_epoca_plantio, regiao)
        VALUES (?, ?, ?)
    ''', dados)
    conn.commit()
    conn.close()

# Função principal para coletar dados e armazenar no banco de dados
def coletar_dados():
    # Obter dados das APIs
    previsao_meteorologica = obter_previsao_meteorologica("Brasília")
    preco_produto = obter_preco_produto()
    epoca_plantio = obter_melhor_epoca_plantio()

    # Salvar os dados no banco de dados
    salvar_previsao_meteorologica(previsao_meteorologica)
    salvar_preco_produto(preco_produto)
    salvar_melhor_epoca_plantio(epoca_plantio)
    print("Dados salvos com sucesso no banco de dados!")

# Chamada para criar as tabelas e coletar os dados
if __name__ == "__main__":
    criar_tabelas()
    coletar_dados()
